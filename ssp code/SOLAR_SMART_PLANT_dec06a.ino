#include "arduino_secrets.h"

#include <DFRobot_AHT20.h>
#include <FastLED.h>
DFRobot_AHT20 aht20;

int s0 = 0;
int s1 = 2;
int s2 = 15;
//Mux in "Z" pin
int Z_pin = A0;
#define NUM_LEDS 5
#define DATA_PIN 3
CRGB leds[NUM_LEDS];
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/4f22dc21-777b-4da6-bef3-2873e21620ab 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float temperature;
  int carbon_Monoxide;
  int light;
  int nitrogen_Dioxide;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

void setup() {
  pinMode(s0, OUTPUT); 
  pinMode(s1, OUTPUT); 
  pinMode(s2, OUTPUT); 

  digitalWrite(s0, LOW);
  digitalWrite(s1, LOW);
  digitalWrite(s2, LOW);
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  aht20.begin();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
   FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
}

void loop() {
  ArduinoCloud.update();
  if(aht20.startMeasurementReady(/* crcEn = */true))
  humidity=aht20.getHumidity_RH();
  temperature=aht20.getTemperature_C();
  delay(1000);
  light=map(readMux(1),10,1024,0,100);
  carbon_Monoxide=readMux(0);
  nitrogen_Dioxide=readMux(3);
  delay(1000);
  if(light<=20)
  {
  leds[0] = CRGB::White;
  leds[1] = CRGB::White;
  leds[2] = CRGB::White;
  leds[3] = CRGB::White;
  leds[4] = CRGB::White;
  FastLED.show();
  delay(500);
  }
   if(light<=20)
  {
  leds[0] = CRGB::White;
  leds[1] = CRGB::White;
  leds[2] = CRGB::White;
  leds[3] = CRGB::White;
  leds[4] = CRGB::White;
  FastLED.show();
  delay(500);
  }
  
  
  
  
}
float readMux(int channel){
  int controlPin[] = {s0, s1, s2};

  int muxChannel[4][3]={
    {0,0,0}, //channel 0
    {1,0,0}, //channel 1
    {0,1,0}, //channel 2
    {1,1,0}, //channel 3
    
  }

  //loop through the 3 sig
  for(int i = 0; i < 3; i ++){
    digitalWrite(controlPin[i], muxChannel[channel][i]);
  }

  int val = analogRead(Z_pin);
 return val;
 delay(2000);
}





